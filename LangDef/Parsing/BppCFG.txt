Context-Free Grammar that dictates order of syntax in B++

    - At least one whitespace character must separate tokens.
        - Tokens that use special symbols (e.g. '+' or '**' or '=') do not need
        whitespace separating them from other tokens.
    - Non-terminals are capitalized.
    - Terminals are surrounded in single quotes. (e.g. 'example')
    - Undefined terminals are surrounded in single-quote carrots. (e.g. '<example>')
    - The '|' symbol represents OR.


Line -> KeywrdExpr

KeywrdExpr -> LetExpr | NowExpr

LetExpr -> 'let' '<var>' '=' Expr
    <var> is a custom variable name

NowExpr -> 'now' '<var>' '=' Expr
    <var> is a custom variable name

Expr -> KeywrdExpr | BaseExpr 

BaseExpr -> MathExpr | VarExpr

MathExpr -> AddExpr

AddExpr -> MultExpr '<add_op>' AddExpr | MultExpr
    <add_op> is any of the additive subset of the primitive operators in ../Types/BppTypesREADME.txt

MultExpr -> ExponExpr '<mult_op>' MultExpr | ExponExpr
     <mult_op> is any of the multiplicative subset of the primitive operators in ../Types/BppTypesREADME.txt

ExponExpr -> PrimExpr '**' ExponExpr | PrimExpr

PrimExpr -> NumExpr | VarExpr | '('Expr')'

NumExpr -> '<integer>'
    <integer> is any integer

VarExpr -> '<var>'
    <var> is a custom variable name